{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8HaL8glX_xxr",
        "outputId": "0ec697fd-5379-448b-ec16-18a3e7cd2e75"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Path found: ['A', 'F', 'G', 'I', 'J']\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['A', 'F', 'G', 'I', 'J']"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "def aStarAlgo(start_node, stop_node):\n",
        "    open_set = {start_node}  # Set of discovered nodes that need to be evaluated\n",
        "    closed_set = set()  # Set of nodes already evaluated\n",
        "    g = {start_node: 0}  # Cost from start node to each node\n",
        "    parents = {start_node: start_node}  # Parent map to reconstruct the path\n",
        "\n",
        "    while open_set:\n",
        "        # Select node with lowest f(n) = g(n) + h(n)\n",
        "        n = min(open_set, key=lambda x: g[x] + heuristic(x))\n",
        "\n",
        "        if n == stop_node:\n",
        "            # Path reconstruction\n",
        "            path = []\n",
        "            while parents[n] != n:\n",
        "                path.append(n)\n",
        "                n = parents[n]\n",
        "            path.append(start_node)\n",
        "            path.reverse()\n",
        "            print('Path found:', path)\n",
        "            return path\n",
        "\n",
        "        # Remove current node from open_set and add it to closed_set\n",
        "        open_set.remove(n)\n",
        "        closed_set.add(n)\n",
        "\n",
        "        for (m, weight) in get_neighbors(n):\n",
        "            if m in closed_set:\n",
        "                continue\n",
        "\n",
        "            new_g = g[n] + weight  # Tentative cost calculation\n",
        "\n",
        "            if m not in open_set:\n",
        "                open_set.add(m)\n",
        "            elif new_g >= g.get(m, float('inf')):  # Ignore paths that are not better\n",
        "                continue\n",
        "\n",
        "            # Update best path\n",
        "            parents[m] = n\n",
        "            g[m] = new_g\n",
        "\n",
        "    print('Path does not exist!')\n",
        "    return None\n",
        "\n",
        "# Function to get neighbors of a node\n",
        "def get_neighbors(v):\n",
        "    return Graph_nodes.get(v, [])\n",
        "\n",
        "# Heuristic function (estimated cost from node to goal)\n",
        "def heuristic(n):\n",
        "    H_dist = {\n",
        "        'A': 11, 'B': 6, 'C': 5, 'D': 7, 'E': 3,\n",
        "        'F': 6, 'G': 5, 'H': 3, 'I': 1, 'J': 0\n",
        "    }\n",
        "    return H_dist.get(n, float('inf'))\n",
        "\n",
        "# Graph representation (nodes and their edges with weights)\n",
        "Graph_nodes = {\n",
        "    'A': [('B', 6), ('F', 3)],\n",
        "    'B': [('A', 6), ('C', 3), ('D', 2)],\n",
        "    'C': [('B', 3), ('D', 1), ('E', 5)],\n",
        "    'D': [('B', 2), ('C', 1), ('E', 8)],\n",
        "    'E': [('C', 5), ('D', 8), ('I', 5), ('J', 5)],\n",
        "    'F': [('A', 3), ('G', 1), ('H', 7)],\n",
        "    'G': [('F', 1), ('I', 3)],\n",
        "    'H': [('F', 7), ('I', 2)],\n",
        "    'I': [('E', 5), ('G', 3), ('H', 2), ('J', 3)],\n",
        "    'J': []  # Destination node\n",
        "}\n",
        "\n",
        "# Running the A* Algorithm\n",
        "aStarAlgo('A', 'J')\n"
      ]
    }
  ]
}